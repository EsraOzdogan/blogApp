npm i express@4.18.1

npm i nodemon@2.0.19 --save-dev  --> nodemon kütüphanesi, otomatik kaydetme icin. --save-dev -->package.jsonda dev-dependencies eklemek icin


--MIDDLEWARE

app.use(function(req,res,next){       
    console.log("middleware 1")
    next();  //süreci devam ettir
});

app.use(function(req,res,next){          
    console.log("middleware 2") 
    next();
});

app.use(function(req,res){          
    console.log("middleware 3") 
    //res.end();
    res.send("<h1>homepage</h1>")
});




--ROUTING

app.use(function(req,res,next){    
    if(req.url =="/" && req.method== "GET"){}   //routing
});


//use methodu özellestirilmis

app.use("/",function(req,res,next){    
    res.send("homepage")  
});


----
app.use("/blogs/5",function(req,res){    //en ozel route en yukarda
    res.send("detail of blog 5")  
});

app.use("/blogs",function(req,res){    
    res.send("blogs list")  
});

app.use("/",function(req,res){    
    res.send("homepage")  
});



//BOOTSTRAP
npm i bootstrap@5.2.0


http://expressjs.com/en/starter/static-files.html -->add app.use(express.static('public'))  for static files

app.use("/libs",express.static('node_modules'));
ya da 
app.use("/libs",express.static(path.join(__dirname,'node_modules')));

<link rel="stylesheet" href="/bootstrap/dist/css/bootstrap.min.css" />
app.use(express.static('node_modules'));



app.use("/blogs/:blogid",function(req,res){   
    //res.sendFile("/views/users/details.html")
   console.log(__dirname)         //dirname mevcut klasörü gösterir
   console.log(__filename)        //dirname mevcut dosyayı gösterir

   //C://blogapp/views/user/details.htmlolmasi icin
   res.sendFile(path.join(__dirname, "views/users","blog-details.html"))
  
});

app.use("/blogs",function(req,res){    
   res.sendFile(path.join(__dirname, "views/users","blogs.html"))

});

app.use("/",function(req,res){    
   res.sendFile(path.join(__dirname, "views/users","index.html"))

});



---EJS KURULUMU

npm i ejs@3.1.8

app.set("view engine", "ejs");
console.log(app.get("view engine"))


.html uzantili sayfalari .ejs cevir


app.use("/",function(req,res){    
   res.sendFile(path.join(__dirname, "../views/users","index.html"))
});

bu yapi

router.use("/",function(req,res){    
   res.render( "users/index")
});


buna cevirildi


--Send Dynamic Data

EJS language support //Extension -- <%=title%> (kolaylik saglamasi icin)

ejs + enter
ejsout + enter


for icin : ejsfor + enter

--For ile
 <% for( let i = 0; i < categories.length; i++ ) { %>
            <a href="" class="list-group-item list-group-action">
              <%= categories[i] %></a
            >
            <% } %>


--forEach ile

 <% categories.forEach(function (category) { %>
            <a href="" class="list-group-item list-group-action">
              <%= category %></a
            >
            <% }) %>


--EJSINC

--tek parametre gönderme

 <%- include('../partials/blog-card',blog) %> 



--birden fazla veri gönderme

<%-
          include('../partials/blog-card',{blog,selectedCategory, ...}) %>



<%-
          include('../partials/blog-card',{blog : b ,selectedCategory: category}) %>




DATABASE

Not Null-> o deger olmadan o veri kaydolmasın

AI --> otomatik primary key arttirma



MYSQL KURULUMU

npm i mysql2@2.3.3


//index.js

const mysql = require("mysql2");
const config = require("./config");

let connection = mysql.createConnection(config.db);

connection.connect(function(err){
    if(err){
        return console.log(err);
    }

    connection.query("select * from blog", function(err, result){
        console.log(result);
        console.log(result[0]);
        console.log(result[0].title);
    });

    console.log("connected to mysql");
});




//config.js 

const config = {
    db: {
        host: "localhost",      //ip adresi
        user: "root",
        password: "Esra.123",
        database: "blogapp"
    },
    //key: ""
}

module.exports = config;


--ASYNC-AWAIT öncesi


 db.execute("select * from blog where isApproved = 1 ")
   .then(blogResult => {
      db.execute("select * from category")
      .then(categoryResult => {
         res.render("users/index", {
            title: "All Courses",
            blogs: blogResult[0],
            categories: categoryResult[0]
         });
      })
      .catch(err => console.log(err))
   })
   .catch(err => console.log(err));


--ASYNC-AWAIT sonrasi

const blogs = await db.execute("select * from blog where isApproved = 1 ")           //db promise döndürecek, await ile bekletiyoruz yani işlem bittginden emin olup alt satira gecicez
console.log(blogs[0])

üstteki ve alttaki aynı 0.index aliyor


const [blogs, ] = await db.execute("select * from blog where isApproved = 1 ")
console.log(blogs)


Await sonrasi;

  try{
      const [blogs,] = await db.execute("select * from blog where isApproved = 1 ");
      console.log(blogs);
      const [categories, ] = await db.execute("select * from category");

      res.render("users/index", {
         title: "All Courses",
         blogs: blogs,
         categories: categories
      });
   }
   catch(err){
      console.log(err);
   }



   NOT: then bloklarini sorgudan dönenler icin kullaniyoruz. İcice yapiypruz. Problem bir islem bitip daha sonras digerinin baslamasiydi. await ile bir satir biip sonra alt satira geciyor sorun cözülüyor